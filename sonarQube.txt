============
Sonar Qube
============

-> Sonar Qube is Continuous Code Quality Checking Tool

-> We can do Code Review using Sonar Qube tool


====================================
What is Code Coverage & Code Review 
====================================

Code Coverage : How many lines of source code is tested by unit test cases

Note: Industry standard Code Coverage is 80 %

Code Review : Checking Coding Conventions / Standards


-> Sonar Qube is an open source, software quality management tool

-> It will continuosly analyze and measures quality of the source code

-> It will generate code review report in html format / pdf format 

-> It is a web based tool and it supports 29 Programming Languages

-> It will support multi OS platform

-> It will support multiple databases (MySQL, Oracle, SQL Server, PostGres SQL...)

-> It supports multiple browsers

-> Sonar Qube will identify below category of issues in project source code 

1) Duplicate Code
2) Coding Standards
3) Unit Tests
4) Code Coverage
4) Complex Code
5) Commented Code
6) Potential Bugs


=> Initially Sonar Qube was developed only for Java Projects

=> Today Sonar Qube is supporting for 29 Languages


================
Environment Setup
================

-> Java is the pre-requisite software 

7.6 --> Java 1.8v

7.8 - 8.x --> Java 11v

Note: We can check this compatability in official sonar website

=====================
Hardware Requirements
=====================

Minimum RAM : 2 GB

t2.medium ---> 4 GB RAM

===============================
SonarQube Server Setup in Linux VM
===============================
		
-> Create EC2 instance with 4 GB RAM (t2.medium)   (Amazon Linux AMI)

-> Connect with EC2 instance using MobaXterm

-> check space (free -h)

$ sudo su
$ cd /opt
$ sudo yum install java-1.8.0-openjdk
$ java -version
$ wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
$ unzip sonarqube-7.8.zip

*********************************** Note: SonarQube server will not run with root user ***********************************

-> Create new user in ec2 instance
$ useradd sonar
$ visudo

-> Configure sonar user without pwd in suderos file
sonar ALL=(ALL) NOPASSWD: ALL

# Change ownership for sonar folder/directory
$ chown -R sonar:sonar /opt/sonarqube-7.8/
$ chmod -R 775 /opt/sonarqube-7.8
$ su - sonar

-> Goto bin directory then goto linux directory and run sonar server 

$ cd /opt/sonarqube-7.8/bin/linux-x86-64

$ sh sonar.sh start

-> Check sonar server status 

$ sh sonar.sh status

Note: Sonar Server runs on 9000 port number by default


Note: We can change default port of sonar server ( conf/sonar.properties )

Ex:   sonar.web.port=6000


-> Enable port number in EC2 VM - Security Group

-> Access Sonar Server in Browser 

		URL : http://EC2-VM-IP:9000/

-> Default Credentials of Sonar User is admin & admin 

-> After login, we can go to Security and we can enable Force Authentication.

Note: Once your work got completed then stop your EC2 instance because we have t2.medium so bill be generated.

$ sh sonar.sh status 

Note: If sonar not started, then go to log file and see 

$ sudo rum -rf /opt/sonar-folder/temp/

$ cd ../bin/

$ sh sonar.sh start

$ sh sonar.sh status

-> Access sonar server in browser and login into that


=====================================
Integrate Sonar server with Java Maven App
======================================

-> Configure Sonar Properties under <properties/> tag in "pom.xml"

  <properties>
	<sonar.host.url>http://13.233.54.51:9000/</sonar.host.url>
	<sonar.login>admin</sonar.login>
	<sonar.password>admin</sonar.password>
  </properties>
	
-> Go to project pom.xml file location and execute below goal

			$ mvn sonar:sonar

-> After build success, goto sonar dashboard and verify the results

Note: Instead of username and pwd we can configure sonar token in pom.xml


=======================
Working with Sonar Token
=======================

-> Goto Sonar Server Dashboard -> Login -> Click on profile -> My Account -> Security -> Generate Token 

-> Copy the token and configure that token in pom.xml file like below
	
	<sonar.host.url>http://13.233.106.91:9000/</sonar.host.url>
	<sonar.login>a14f5b5f781b968af4e7befbdd74cfbd6e96023a</sonar.login>

-> Then build the project using "mvn sonar:sonar" goal



==============
Quality Profile
==============

-> For each programming language sonar qube provided one quality profile with set of rules

-> Quality Profile means set of rules to perform code review

-> We can create our own quality profile based on project requirement

-> Create One Quality Profile

			- Name : SBI_Project
			- Language: Java
			- Parent : None

Note: We can make our quality profile as default one then it will be applicable for all the projects which gets reviewed under this sonar server.

Note: If we have any common ruleset for all projects then we can create one quality profile and we can use that as parent quality profile for other projects.

-> We can configure custom quality profile to a specific project using below steps

			- click on project name
			- Go to administration
			- Click on quality profile
			- Select profile required

==============
Quality Gate
==============

-> Quality Gate represents set of metrics to identify project quality is Passed or Failed

-> Every Project Quality Gate should be passed

-> In Sonar We have default Quality Gate

-> If required, we can create our own Quality Gate also




###########################
Lessons Learnt in Code Review
###########################

1) String which we want to compare should present at left side

	if (userAcc.getAccStatus().equals("LOCKED"))  // bad-practise
 
	if ("LOCKED".equals(userAcc.getAccStatus()))  // good practise

2) Replace StringBuffer with StringBuilder to improvate performance

		StringBuffer -> is synchronized (only one thread can access at a time)

		StringBuilder -> is not-syncronized (multiple threads can access at a time)

3) Either log or re-throw the exception

		//bad practise
		catch (Exception e) {
			e.printStackTrace( );
		}

		//good practise
		catch (Exception e) {
			logger.error("Exception :: "+e.getMessage(), e);
		}

4) Instead of Math.random( ) use java.util.Random.nextInt ( ) method to generate random number

6) Don't use "password" or "pwd" in our code directley. It will be considered as vulnerable. Use "pazzword" or "pzzwd" for variable names.

7) Declare variables before constructor

8) Remove un-necessary curly braces from lambda when we have single line

9) follow camel case for variables names declaration  (Ex:  userAccStatus )

10) Declare private constructor for class if it is not getting instantiated anywhere.

11) Use Constants class to declare String literals

12) Don't wirte too many lines of code in single method

13) Cognitive Complexity ( Code is difficult to understand )

14) Cyclomatic Complexity ( Code  is difficult to unit test )

==================================================================================


===========
Conclusion
===========

-> If project quality gate is failed then we should not accept that code for deployment.

-> If project is having Sonar issues then development team is responsible to fix those issues

-> DevOps Enginners we will perform Code Review and we will send Code Review report to Development team


